{"version":3,"file":"index.js","sources":["../index.js"],"sourcesContent":["const isObj = val => val && typeof val === 'object'\nconst isArr = arr => Array.isArray(arr)\n\nconst arrMerge = (a = [], b = []) => {\n  return [\n    ...a.filter(x => !b.includes(x)),\n    ...b.filter(x => !a.includes(x))\n  ]\n}\n\n/**\n * Compare to objects on a property bases\n * @param {Object} base object for compare\n * @param {*} other\n */\nfunction compare (base, other) {\n  const diff = {}\n  for (const prop in base) {\n    // Both objects have the prop and both are objects\n    if (isObj(base[prop]) && other[prop]) {\n      const result = compare(base[prop], other[prop])\n      if (Object.getOwnPropertyNames(result).length) {\n        diff[prop] = result\n      }\n    }\n\n    // Prop is array\n    if (isArr(base[prop])) {\n      diff[prop] = arrMerge(base[prop], other[prop])\n    }\n\n    // Prop in base\n    if (!other[prop]) {\n      diff[prop] = base[prop]\n    }\n  }\n\n  return diff\n}\n\nmodule.exports = function (base = {}, other = {}) {\n  if (!isObj(base) || !isObj(other)) {\n    throw new Error('Argument is not object')\n  }\n\n  return compare(base, other)\n}\n"],"names":["const","isObj","val","arrMerge","a","b","filter","x","includes","module","exports","base","other","Error","compare","diff","prop","result","Object","getOwnPropertyNames","length","Array","isArray"],"mappings":"AAAAA,IAAMC,WAAQC,UAAOA,GAAsB,iBAARA,GAG7BC,WAAYC,EAAQC,yBAAJ,mBAAQ,IACrBD,EACAE,gBAAOC,UAAMF,EAAEG,SAASD,YAC1BF,EAAEC,gBAAOC,UAAMH,EAAEI,SAASD,OAkCjCE,OAAOC,QAAU,SAAUC,EAAWC,qBAAJ,mBAAY,KACvCX,EAAMU,KAAUV,EAAMW,SACnB,IAAIC,MAAM,iCA3BpB,SAASC,EAASH,EAAMC,OAChBG,EAAO,OACRf,IAAMgB,KAAQL,EAAM,IAEnBV,EAAMU,EAAKK,KAAUJ,EAAMI,GAAO,KAC9BC,EAASH,EAAQH,EAAKK,GAAOJ,EAAMI,IACrCE,OAAOC,oBAAoBF,GAAQG,SACrCL,EAAKC,GAAQC,GArBAI,MAAMC,QA0BbX,EAAKK,MACbD,EAAKC,GAAQb,EAASQ,EAAKK,GAAOJ,EAAMI,KAIrCJ,EAAMI,KACTD,EAAKC,GAAQL,EAAKK,WAIfD,EAQAD,CAAQH,EAAMC"}